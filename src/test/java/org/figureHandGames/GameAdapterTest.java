package org.figureHandGames;

import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.*;

class GameAdapterTest {

    @Test
    void showFigureForRPS() {
        JanKenPonPlay janKenPonPlay = new JanKenPonPlay();
        GameAdapter gameAdapter = new GameAdapter(janKenPonPlay);
        String resultRock = gameAdapter.showFigureForRPS("–∫–∞–º–µ–Ω—å");
        String resultBird = gameAdapter.showFigureForRPS("–ø—Ç–∏—Ü–∞");
        String resultWater = gameAdapter.showFigureForRPS("–≤–æ–¥–∞");

        String[] extended = {"–ù–∏—á—å—èü§ù", "–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ", "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è"};

        assertTrue(Arrays.asList(extended).contains(resultRock));
        assertTrue(Arrays.asList(extended).contains(resultBird));
        assertTrue(Arrays.asList(extended).contains(resultWater));

        String resultScissors = gameAdapter.showFigureForRPS("–Ω–æ–∂–Ω–∏—Ü—ã");
        String resultPaper = gameAdapter.showFigureForRPS("–±—É–º–∞–≥–∞");

        assertTrue(Arrays.asList(extended).contains(resultRock));
        assertTrue(Arrays.asList(extended).contains(resultScissors));
        assertTrue(Arrays.asList(extended).contains(resultPaper));
    }

    @Test
    void rockOutcome() {
        JanKenPonPlay janKenPonPlay = new JanKenPonPlay();
        GameAdapter play = new GameAdapter(janKenPonPlay);
        assert Objects.equals(play.rockOutcome("–∫–∞–º–µ–Ω—å"), "–ù–∏—á—å—èü§ù");
        assert Objects.equals(play.rockOutcome("–ø—Ç–∏—Ü–∞"), "–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ");
        assert Objects.equals(play.rockOutcome("–≤–æ–¥–∞"), "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è");
    }

    @Test
    void scissorsOutcome() {
        JanKenPonPlay janKenPonPlay = new JanKenPonPlay();
        GameAdapter play = new GameAdapter(janKenPonPlay);
        assert Objects.equals(play.scissorsOutcome("–ø—Ç–∏—Ü–∞"), "–ù–∏—á—å—èü§ù");
        assert Objects.equals(play.scissorsOutcome("–≤–æ–¥–∞"), "–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ");
        assert Objects.equals(play.scissorsOutcome("–∫–∞–º–µ–Ω—å"), "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è");
    }

    @Test
    void paperOutcome() {
        JanKenPonPlay janKenPonPlay = new JanKenPonPlay();
        GameAdapter play = new GameAdapter(janKenPonPlay);
        assert Objects.equals(play.paperOutcome("–≤–æ–¥–∞"), "–ù–∏—á—å—èü§ù");
        assert Objects.equals(play.paperOutcome("–∫–∞–º–µ–Ω—å"), "–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ");
        assert Objects.equals(play.paperOutcome("–ø—Ç–∏—Ü–∞"), "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è");
    }
}