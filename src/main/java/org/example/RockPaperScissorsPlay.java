package org.example;

import java.util.Objects;

/**
 * –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã ¬´–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞¬ª
 */
public class RockPaperScissorsPlay implements Play {
    private final String[] figure = {"–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"};

    /**
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∏–≥—Ä—ã –≤ ¬´–∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞¬ª
     *
     * @param figureUser - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    public void generateShowFigure(String figureUser) {
        String result = figure[(int) Math.round(Math.random() + 1)];
        switch (figureUser) {
            case "–∫–∞–º–µ–Ω—å":
                if (Objects.equals(result, "–∫–∞–º–µ–Ω—å")) {
                    System.out.println(result + "\n–ù–∏—á—å—èü§ù");
                } else if (Objects.equals(result, "–Ω–æ–∂–Ω–∏—Ü—ã")) {
                    System.out.println(result + "\n–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ");
                } else {
                    System.out.println(result + "\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è");
                }
                break;
            case "–Ω–æ–∂–Ω–∏—Ü—ã":
                if (Objects.equals(result, "–Ω–æ–∂–Ω–∏—Ü—ã")) {
                    System.out.println(result + "\n–ù–∏—á—å—èü§ù");
                } else if (Objects.equals(result, "–±—É–º–∞–≥–∞")) {
                    System.out.println(result + "\n–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ");
                } else {
                    System.out.println(result + "\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è");
                }
                break;
            case "–±—É–º–∞–≥–∞":
                if (Objects.equals(result, "–±—É–º–∞–≥–∞")) {
                    System.out.println(result + "\n–ù–∏—á—å—èü§ù");
                } else if (Objects.equals(result, "–∫–∞–º–µ–Ω—å")) {
                    System.out.println(result + "\n–¢—ã –ø–æ–±–µ–¥–∏–ªüèÜ");
                } else {
                    System.out.println(result + "\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª‚òπÔ∏è");
                }
                break;
            default:
                System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");
        }
    }
}
